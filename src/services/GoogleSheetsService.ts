import { google, Auth, sheets_v4 } from "googleapis";
import knex from "#postgres/knex.js";
import { WBWarehouseTariff } from "./WBApiService.js";

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö
 */
export class GoogleSheetsService {
    private readonly auth: Auth.GoogleAuth;
    private readonly sheets: sheets_v4.Sheets;
    private readonly SHEET_NAME = "stocks_coefs";

    constructor() {
        // –ü–∞—Ä—Å–∏–º JSON credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const credentialsJson = process.env.GOOGLE_SHEETS_CREDENTIALS_JSON || "{}";
        
        let credentials;
        try {
            credentials = JSON.parse(credentialsJson);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GOOGLE_SHEETS_CREDENTIALS_JSON");
            throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ GOOGLE_SHEETS_CREDENTIALS_JSON");
        }

        this.auth = new google.auth.GoogleAuth({
            credentials,
            scopes: ["https://www.googleapis.com/auth/spreadsheets"],
        });

        this.sheets = google.sheets({ version: "v4", auth: this.auth });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ Google –¢–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
     * @param tariffs - –ú–∞—Å—Å–∏–≤ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
     */
    async updateAllSheets(tariffs: WBWarehouseTariff[]): Promise<void> {
        const spreadsheetRows = await knex("spreadsheets").select("spreadsheet_id");

        if (spreadsheetRows.length === 0) {
            console.warn("‚ö†Ô∏è –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î");
            return;
        }

        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${spreadsheetRows.length} —Ç–∞–±–ª–∏—Ü(—ã)...`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        const updatePromises = spreadsheetRows.map((row) =>
            this.updateSheet(row.spreadsheet_id, tariffs)
        );

        await Promise.allSettled(updatePromises);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é Google –¢–∞–±–ª–∏—Ü—É
     * @param spreadsheetId - ID Google –¢–∞–±–ª–∏—Ü—ã
     * @param tariffs - –ú–∞—Å—Å–∏–≤ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
     */
    private async updateSheet(spreadsheetId: string, tariffs: WBWarehouseTariff[]): Promise<void> {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å—Ç—Ä–æ–∫–∏
            const values = [
                ["–°–∫–ª–∞–¥", "–ö–æ—ç—Ñ. –¥–æ—Å—Ç–∞–≤–∫–∏", "–ö–æ—ç—Ñ. –≤–æ–∑–≤—Ä–∞—Ç–∞", "–ö–æ—ç—Ñ. —Ö—Ä–∞–Ω–µ–Ω–∏—è"],
                ...tariffs.map((t) => [
                    t.warehouseName,
                    t.deliveryCoef,
                    t.returnCoef,
                    t.storageCoef,
                ]),
            ];

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.sheets.spreadsheets.values.clear({
                spreadsheetId,
                range: this.SHEET_NAME,
            });

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.sheets.spreadsheets.values.update({
                spreadsheetId,
                range: `${this.SHEET_NAME}!A1`,
                valueInputOption: "RAW",
                requestBody: { values },
            });

            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${spreadsheetId}`);
        } catch (error: any) {
            const errorMessage = error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${spreadsheetId}: ${errorMessage}`);
            
            // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
        }
    }
}